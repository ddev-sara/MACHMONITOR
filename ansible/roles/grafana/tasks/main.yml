---
- name: install gpg
  apt:  #apt module manages apt packages such as for debian/ubuntu
    name: gnupg,software-properties-common
    state: present
    update_cache: yes
    cache_valid_time: 3600
- name: add gpg hey
  apt_key:
    url: "https://packages.grafana.com/gpg.key"
    validate_certs: no
- name: add repository
  apt_repository:
    repo: "deb https://packages.grafana.com/oss/deb stable main"             
    state: present
    validate_certs: no
- name: install grafana
  apt:
    name: grafana
    state: latest
    update_cache: yes
    cache_valid_time: 3600
- name: start service grafana-server
  systemd:
    name: grafana-server
    state: started
    enabled: yes

  
# - name: change admin password for grafana gui
#   shell : "grafana-cli admin reset-admin-password {{ grafana_admin_password }}"
#   register: __command_admin
#   changed_when: __command_admin.rc !=0

# - name: import Grafana Dashboards
#   community.grafana.grafana_dashboard:
#     # grafana_url: http://grafana.sara.ddev.sg:3000
#     url: "{{ grafana_url }}"
#     folder: "{{ title }} MACH"
#     dashboard_id: "{{ item }}"
#     overwrite: true
#     url_password: "Password1234"
#   loop: "{{ grafana_dashboard_ids }}"
#   notify:
#     - Restart grafana-server
#   when: enable_grafana_import and ( inventory_hostname on groups['grafana'])


- name: Copy grafana.ini to {{grafana_etc_dir}}
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: '0644'
    owner: grafana
    group: grafana
  with_items:
    - { src: "../templates/grafana.ini.j2", dest: "/etc/grafana/grafana.ini"}
  notify:
    - Enable grafana-server
    - Start grafana-server
  when: enable_grafana and (inventory_hostname in groups['grafana'])
  become: true
  tags:
    - configure
    - grafana
    - setup

- name: Create Grafana Provisioning directory if it does not exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: grafana
    group: grafana
    mode: '0755'
  with_items:
    - "{{ grafana_provision_dir }}"
    - "{{ grafana_provision_dir }}/dashboards"
    - "{{ grafana_provision_dir }}/dashboards/MACH"
    - "{{ grafana_provision_dir }}/datasources"
  when: enable_grafana and (inventory_hostname in groups['grafana'])
  become: true

- name: "Copy Provisioning/Datasource Files To {{ grafana_provision_dir }}"
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: grafana
    group: grafana
    mode: '0644'
  with_items:
    - { src: "dashboards.yml.j2", dest: "{{ grafana_provision_dir }}/dashboards/dashboards.yml"}
    - { src: "datasource.yml.j2", dest: "{{ grafana_provision_dir }}/datasources/datasource.yml"}
    - { src: "datasourcegithub.yml.j2", dest: "{{ grafana_provision_dir }}/datasources/datasourcesgithub.yml"}
  vars:
    enable_datasource_github: true
  when: enable_grafana and (inventory_hostname in groups['grafana'])
  become: true


- name: "Copy Dashboards JSON to {{ grafana_provision_dir }}"
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: grafana
    group: grafana
    mode: '0644'
  with_items:
    - { src: "files/dashboards/NodeExporter.json", dest: "{{ grafana_provision_dir }}/dashboards/NodeExporter.json"}
    - { src: "files/dashboards/BlackBoxHTTPProber.json", dest: "{{ grafana_provision_dir }}/dashboards/BlackBoxHTTPProber.json"}
    - { src: "files/dashboards/Prometheus.json", dest: "{{ grafana_provision_dir }}/dashboards/Prometheus.json"}
    - { src: "files/dashboards/GithubDefault.json", dest: "{{ grafana_provision_dir }}/dashboards/GithubDefault.json"}
  when: enable_grafana and (inventory_hostname in groups['grafana'])
  #notify:
  # - Restart grafana-server
  become: true

# - name: wait for service up
#   uri:
#     url: "http://localhost:3000"
#     status_code: 200
#   register: __result
#   until: __result.status == 200
#   retries: 120
#   delay: 1
 
- name: Install Grafana GitHub datasource plugin
  community.grafana.grafana_plugin:
    name: grafana-github-datasource
    version: latest
    state: present
  when:
    - enable_datasource_github | default(false)
    - inventory_hostname in groups['grafana']
  become: true
 
- name: Install Grafana AWS datasource plugin
  community.grafana.grafana_plugin:
    name: aws-datasource-provisioner-app
    version: latest
    state: present
  when:
    - enable_datasource_aws | default(false)
    - inventory_hostname in groups['grafana']
  become: true
 
 
- name: Install/update Grafana github datasource plugin
  community.grafana.grafana_plugin:
    name: "{{ items }}"
    version: latest
    state: present
  with_items:
    - grafana-github-datasource
    - aws-datasource-provisioner-app
  when: (enable_datasource_github | default(false)) and (enable_datasource_aws | default(false)) and (inventory_hostname in groups['grafana'])
  # notify:
  #   - Restart grafana-server
  become: true
 

 
- name : Reload and Restart systemd for grafana
  ansible.builtin.systemd_service:
    state: restarted
    daemon_reload: true
    name: grafana-server
  register: systemd_output
  become: true
  tags:
    - configure
    - grafana
    - setup